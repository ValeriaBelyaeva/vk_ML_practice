# -*- coding: utf-8 -*-
"""baseline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LecDDa8u0P9BsXpFSlbSHL4BkoE_xGKk
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import f1_score, classification_report
from scipy.sparse import hstack

train = pd.read_csv("train.csv")
test  = pd.read_csv("test.csv")

train["text"] = (train["title"].fillna("") + " " + train["url"].fillna("")).str.lower()
test["text"]  = (test["title"].fillna("")  + " " + test["url"].fillna("")).str.lower()

X_train, X_val, y_train, y_val = train_test_split(
    train["text"], train["label"],
    test_size=0.2,
    stratify=train["label"],
    random_state=42
)

tfidf_word = TfidfVectorizer(
    analyzer="word",
    ngram_range=(1, 2),
    max_features=30_000,        # слова/биграммы
    min_df=2
)
tfidf_char = TfidfVectorizer(
    analyzer="char",
    ngram_range=(3, 5),
    max_features=10_000,        # символьные n-граммы
    min_df=2
)

Xtr_w = tfidf_word.fit_transform(X_train)
Xva_w = tfidf_word.transform(X_val)
Xte_w = tfidf_word.transform(test["text"])

Xtr_c = tfidf_char.fit_transform(X_train)
Xva_c = tfidf_char.transform(X_val)
Xte_c = tfidf_char.transform(test["text"])

# объединяем словесные и символьные признаки
Xtr = hstack([Xtr_w, Xtr_c])
Xva = hstack([Xva_w, Xva_c])
Xte = hstack([Xte_w, Xte_c])

clf = LogisticRegression(
    class_weight="balanced",    # весим класс 1 ~ 7×
    max_iter=600,
    solver="lbfgs",             # хорошо работает на sparse
    n_jobs=-1
)
clf.fit(Xtr, y_train)

y_pred = clf.predict(Xva)
print("F1 (class 1):", f1_score(y_val, y_pred, pos_label=1))
print(classification_report(y_val, y_pred, digits=3))

X_full_w = tfidf_word.fit_transform(train["text"])
X_full_c = tfidf_char.fit_transform(train["text"])
X_full   = hstack([X_full_w, X_full_c])

clf_final = LogisticRegression(
    class_weight="balanced",
    max_iter=600,
    solver="lbfgs",
    n_jobs=-1
)
clf_final.fit(X_full, train["label"])

y_test = clf_final.predict(Xte)
pd.DataFrame({"ID": test["ID"], "label": y_test}) \
  .to_csv("submission_logreg_tfidf.csv", index=False)

print("Файл submission_logreg_tfidf.csv сохранён.")